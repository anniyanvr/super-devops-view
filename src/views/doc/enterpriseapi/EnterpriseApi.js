// Generated by XCloud DevOps for Codegen, refer: http://dts.devops.wl4g.com
import {transDate, getDay} from 'utils/'
import i18n from "../../../i18n/i18n";
import dragTreeTable from "xcloud-vue-drag-tree-table";

export default {
    name: 'enterpriseApi',
    components: {
        dragTreeTable
    },
    data() {
        return {

            repositoryId: 1,

            versions: [],
            versionId: 1,


            //module part
            modules: [],
            node_had: {},
            resolve_had: {},

            tempNode: null,

            //api part
            apiList: [],
            defaultProps: {
                children: 'children',
                label: 'name',
                isLeaf: 'leaf'
            },

            //查询条件
            searchParams: {
                apiVersion: '',
                address: '',
            },

            //分页信息
            total: 0,
            pageNum: 1,
            pageSize: 9999,

            //弹窗表单
            saveForm: {
                moduleId: '',
                name: '',
                url: '',
                method: '',
                description: '',
            },

            dialogVisible: false,
            dialogTitle: '',
            dialogLoading: false,

            tableData: [],

            enterpriseOas3Components: [],
            enterpriseOas3Tags: [],

            // 表单规则
            rules: {
                name: [{ required: true, message: 'name is required', trigger: 'change' }],
                address: [{ required: true, message: 'address is required', trigger: 'change' }],
                apiVersion: [{ required: true, message: 'apiVersion is required', trigger: 'change' }],
                protocolType: [{ required: true, message: 'protocolType is required', trigger: 'change' }],
            },
            loading: false,

            treeData: {
                custom_field: {
                    //id: 'id',
                    //order: 'sort',
                    lists: 'children',
                    parent_id: 'parentId'
                },
                columns: [
                    {
                        type: "selection",
                        title: "属性名",
                        field: "name",
                        width: 200,
                        align: "center",
                        editable: true,
                    },
                    {
                        title: "scope",
                        field: "scope",
                        width: 100,
                        align: "center"
                    },
                    {
                        title: "type",
                        field: "type",
                        width: 100,
                        align: "center"
                    },{
                        title: "pos",
                        field: "pos",
                        width: 100,
                        align: "center"
                    },{
                        title: "rule",
                        field: "rule",
                        width: 100,
                        align: "center"
                    },{
                        title: "value",
                        field: "value",
                        width: 100,
                        align: "center",
                        editable: true,
                    },{
                        title: "required",
                        field: "required",
                        width: 100,
                        align: "center"
                    },
                ],
                lists: []
            },



        }
    },

    mounted() {
        this.getData();
        this.getVersionsByRepositoryId();
    },
    methods: {
        //api tree part
        isApi(data){
            return !!(data && data.moduleId);
        },

        getVersionsByRepositoryId(){
            this.$$api_doc_getVersionsByRepositoryId({
                data: {
                    repositoryId: this.versionId,
                },
                fn: json => {
                    this.versions = json.data;
                    this.versionId = json.data[0].id;
                }
            });
        },

        loadModule(node, resolve){
            if (node.level === 0) {
                this.node_had = node;
                this.resolve_had = resolve;
            }

            let parentId = 0;
            if(node.data && node.data.id ){
                parentId = node.data.id;
            }
            this.$$api_doc_getByVersionIdAndParentId({
                data: {
                    versionId: this.versionId,
                    parentId: parentId,
                },
                fn: json => {
                    let data = json.data;
                    for(let i in data){
                        data[i].key = 'module_'+data[i].id;
                    }

                    if(parentId !== 0){
                        this.$$api_doc_getByModuleId({
                            data: {
                                versionId: this.versionId,
                                moduleId: parentId,
                            },
                            fn: json2 => {
                                if(json2.data && json2.data.length>0){
                                    for(let i in json2.data){
                                        json2.data[i].leaf = true;
                                        json2.data[i].key = 'api_' + json2.data[i].id;
                                    }
                                    data = data.concat(json2.data);
                                    resolve(data);
                                }else{
                                    resolve(data);
                                }
                            },
                        })
                    }else{
                        resolve(data);
                    }
                },
            })
        },

        reloadApiTree() {
                this.node_had.childNodes = [];//把存起来的node的子节点清空，不然会界面会出现重复树！
                this.loadModule(this.node_had, this.resolve_had);//再次执行懒加载的方法
        },

        refreshByNode(node, key) {
            if(!node){
                let node = this.$refs.asyncTree.getNode(key);// 通过节点id找到对应树节点对象
            }
            node.loaded = false;
            node.expand(); // 主动调用展开节点方法，重新查询该节点下的所有子节点
        },



        addDir(parent,node){
            this.$prompt('请输入目录名称', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
            }).then(({ value }) => {
                if(parent){
                    this.$$api_doc_saveEnterpriseApiModule({
                        data: {
                            name: value,
                            versionId: this.versionId,
                            parentId: parent.id,
                        },
                        fn: json => {
                            this.refreshByNode(node);
                        },
                    })
                }else{
                    this.$$api_doc_saveEnterpriseApiModule({
                        data: {
                            name: value,
                            versionId: this.versionId,
                            parentId: 0,
                        },
                        fn: json => {
                            this.reloadApiTree();
                        },
                    })
                }
            }).catch(() => {
                //do nothing
            });
        },

        addApi(parent, node) {
            this.$prompt('请输入接口名称', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
            }).then(({value}) => {
                this.$$api_doc_saveEnterpriseApi({
                    data: {
                        name: value,
                        moduleId: parent.id,
                    },
                    fn: json => {
                        this.refreshByNode(node);
                    }
                });
            }).catch(() => {
                //do nothing
            });
        },

        getTags(node, tags){
            if(node.parent){
                this.getTags(node.parent, tags);
            }
            if(node.data.label){
                tags.push(node.data.label);
            }
        },

        handleNodeClick(data) {
            if(!this.isApi(data)){
                return;
            }
            this.cleanSaveForm();
            if (!data.id) {
                return;
            }
            this.$$api_doc_enterpriseApiDetail({
                data: {
                    id: data.id,
                },
                fn: json => {
                    this.saveForm = json.data;
                    this.treeData.lists = json.data.properties;
                },
            });
        },

        onSubmit() {
            this.getData();
        },
        currentChange(i) {
            this.pageNum = i;
            this.getData();
        },
        addData() {
            this.cleanSaveForm();
            this.dialogVisible = true;
            this.dialogTitle = 'Add';
        },
        // 获取列表数据
        getData() {
            this.loading = true;
            this.searchParams.pageNum = this.pageNum;
            this.searchParams.pageSize = this.pageSize;
            this.$$api_doc_enterpriseApiList({
                data: this.searchParams,
                fn: json => {
                    this.loading = false;
                    this.total = json.data.total;
                    this.tableData = json.data.records;
                    this.dealWithApiList();
                },
                errFn: () => {
                    this.loading = false;
                }
            })
        },

        getApisByVersionid() {
            this.loading = true;
            this.$$api_doc_getApisByVersionid({
                data: {
                    versionId: '',
                },
                fn: json => {
                    this.loading = false;

                    //TODO
                    this.tableData = json.data.enterpriseOas3Apis;
                    this.enterpriseOas3Components = json.data.enterpriseOas3Components;
                    this.enterpriseOas3Tags = json.data.enterpriseOas3Tags;

                    this.dealWithApiList();
                },
                errFn: () => {
                    this.loading = false;
                }
            })
        },



        dealWithApiList(){
            this.apiList = [];
            for(let i in this.tableData){
                let item = this.tableData[i];
                if(item.tags && item.tags.length>0){
                    let tags = item.tags.split(',');
                    let currentList = this.apiList;
                    for(let j in tags){
                        let tag = tags[j];
                        currentList = this.findNodeAndBuild(currentList, tag);
                    }
                    item.label = item.name;
                    currentList.push(item);
                }else{
                    item.label = item.name;//TODO rename
                    this.apiList.push(item);
                }
            }
        },

        findNodeAndBuild(list, label){
            let node = list.find(n => {
                return n.label === label && !this.isApi(n);
            });
            if(!node){
                node = {
                    label: label,
                    children: [],
                };
                list.push(node);
            }
            return node.children;
        },
        delApiOrDir(data, node){
            if(this.isApi(data)){
                this.delData(data);
            }else{
                if(node.parent.data.children){
                    for(let i in node.parent.data.children){
                        if(node.parent.data.children[i] == data){
                            node.parent.data.children.splice(i, 1);
                            return;
                        }
                    }
                }else if(node.parent.data){
                    for(let i in node.parent.data){
                        if(node.parent.data[i] == data){
                            node.parent.data.splice(i, 1);
                            return;
                        }
                    }
                }
            }
        },
        cleanSaveForm() {
            this.saveForm = {
                moduleId: '',
                name: '',
                url: '',
                method: '',
                description: '',
            };
        },
        saveData() {
            this.dialogLoading = true;
            this.$refs['saveForm'].validate((valid) => {
                if (valid) {
                    this.saveForm.properties = this.treeData.lists;
                    this.$$api_doc_saveEnterpriseApi({
                        data: this.saveForm,
                        fn: json => {
                            this.$message({
                                message: '保存成功',
                                type: 'success'
                            });
                            this.dialogLoading = false;
                        },
                        errFn: () => {
                            this.dialogLoading = false;
                        }
                    });
                }else {
                    this.dialogLoading = false;
                }
            });
        },

        delData(row) {
            if (!row.id) {
                return;
            }
            this.$confirm('Confirm?', 'warning', {
                confirmButtonText: 'OK',
                cancelButtonText: 'Cancel',
                type: 'warning'
            }).then(() => {
                this.$$api_doc_delEnterpriseApi({
                    data: {
                        id: row.id,
                    },
                    fn: json => {
                        this.$message({
                            message: 'Success',
                            type: 'success'
                        });
                        this.getData();
                    },
                })
            }).catch(() => {
                //do nothing
            });
        },

        clickBtn(row){
            debugger
            console.info(row);
        },

        onTreeDataChange(list) {
            this.treeData.lists = list;
        },


    }
}
