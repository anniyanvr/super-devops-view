// Generated by XCloud DevOps for Codegen, refer: http://dts.devops.wl4g.com
import {transDate, getDay} from 'utils/'
import * as monaco from 'monaco-editor'
//import * as monaco from "monaco-editor/esm/vs/editor/editor.api.js";


export default {
    name: 'enterpriseTemplate',
    data() {
        return {
            editor: null,

            path: '',
            content: '',
        }
    },

    mounted() {
        //this.getData();
        //this.test();
        this.initEditor();
    },
    methods: {

        initEditor() {
            // 初始化编辑器，确保dom已经渲染
            this.editor = monaco.editor.create(document.getElementById('container'), {
                value: '',//编辑器初始显示文字
                language: 'html',//语言支持自行查阅demo
                automaticLayout: true,//自动布局
                theme: 'vs' //官方自带三种主题vs, hc-black, or vs-dark
            });
        },
        getValue() {
            this.editor.getValue(); //获取编辑器中的文本
        },

        openFile(path){
            console.info(path)
            this.path = path;
            this.$$api_doc_getFileInfo({
                data: {
                    path: path,
                },
                fn: json => {
                    //this.editor.setValue(json.content);
                    this.content = json.data.content;
                    this.changeModel(json.data.content);

                },
            })
        },

        changeModel(value){
            let oldModel = this.editor.getModel();//获取旧模型

            //var value = this.editor.getValue();//获取旧的文本
            //创建新模型，value为旧文本，id为modeId，即语言（language.id）
            //modesIds即为支持语言
            var modesIds = monaco.languages.getLanguages().map(function(lang) {
                return lang.id;
            });


            var newModel = monaco.editor.createModel(value,"html");
            //将旧模型销毁
            if(oldModel){
                oldModel.dispose();
            }
            //设置新模型
            this.editor.setModel(newModel);
        },

        saveFile(){
            let content = this.editor.getValue();
            this.$$api_doc_saveFile({
                data: {
                    path: this.path,
                    content: content,
                },
                fn: json => {
                    //this.editor.setValue(json.content);
                    this.$message({
                        message: 'Success',
                        type: 'success'
                    });
                },
            })
        }



    }
}
